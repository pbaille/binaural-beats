{:rename-macros {}, :renames {}, :use-macros {reaction reagent.ratom, run! reagent.ratom}, :excludes #{}, :name binaural-beats.wave-shapper, :imports nil, :requires {r reagent.core, reagent.core reagent.core, audio binaural-beats.audio, binaural-beats.audio binaural-beats.audio, binaural-beats.spline-editor binaural-beats.spline-editor, s cljs-bach.synthesis, cljs-bach.synthesis cljs-bach.synthesis}, :uses {spline-editor binaural-beats.spline-editor}, :defs {ctx {:name binaural-beats.wave-shapper/ctx, :file "src/binaural_beats/wave_shapper.cljs", :line 8, :column 1, :end-line 8, :end-column 13, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 8, :column 10, :end-line 8, :end-column 13}}, wave {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([{:keys [ctx], [real imag] :spec}]))}, :name binaural-beats.wave-shapper/wave, :variadic false, :file "src/binaural_beats/wave_shapper.cljs", :end-column 11, :method-params ([p__29190]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ctx], [real imag] :spec}]))}, osc {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 16, :column 7, :end-line 16, :end-column 10, :arglists (quote ([ctx]))}, :name binaural-beats.wave-shapper/osc, :variadic false, :file "src/binaural_beats/wave_shapper.cljs", :end-column 10, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, set-wave {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([osc w]))}, :name binaural-beats.wave-shapper/set-wave, :variadic false, :file "src/binaural_beats/wave_shapper.cljs", :end-column 15, :method-params ([osc w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([osc w]))}, gain {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 23, :column 7, :end-line 23, :end-column 11, :arglists (quote ([ctx v]))}, :name binaural-beats.wave-shapper/gain, :variadic false, :file "src/binaural_beats/wave_shapper.cljs", :end-column 11, :method-params ([ctx v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx v]))}, c> {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 27, :column 7, :end-line 27, :end-column 9, :arglists (quote ([& nodes])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}}, :name binaural-beats.wave-shapper/c>, :variadic true, :file "src/binaural_beats/wave_shapper.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}, :method-params [(nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists ([& nodes])}, wave-shapper {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/wave_shapper.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([]))}, :name binaural-beats.wave-shapper/wave-shapper, :variadic false, :file "src/binaural_beats/wave_shapper.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent.ratom reagent.ratom, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :button :width :points :on-click :spec :foo :x :ranges :ctx :height :div.wave-shapper}, :order [:spec :ctx :x :y :foo :div.wave-shapper :points :ranges :height :width :button :on-click]}, :doc nil}