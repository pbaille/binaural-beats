{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name binaural-beats.utils, :imports nil, :requires {r reagent.core, reagent.core reagent.core, cljsjs.d3 cljsjs.d3}, :uses nil, :defs {get-mouse-signal {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([& [el]])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([el])], :arglists ([& [el]]), :arglists-meta (nil)}}, :name binaural-beats.utils/get-mouse-signal, :variadic true, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([el])], :arglists ([& [el]]), :arglists-meta (nil)}, :method-params [([el])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists ([& [el]])}, mount {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([c id]))}, :name binaural-beats.utils/mount, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 12, :method-params ([c id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c id]))}, d3 {:name binaural-beats.utils/d3, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 32, :column 1, :end-line 32, :end-column 8, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 32, :column 6, :end-line 32, :end-column 8}}, log {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name binaural-beats.utils/log, :variadic true, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, p {:name binaural-beats.utils/p, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 23, :column 1, :end-line 23, :end-column 7, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 23, :column 6, :end-line 23, :end-column 7}}, interp-seq {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 107, :column 7, :end-line 107, :end-column 17, :arglists (quote ([interpolator start end step]))}, :name binaural-beats.utils/interp-seq, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 17, :method-params ([interpolator start end step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 4, :fn-var true, :arglists (quote ([interpolator start end step]))}, with-precision {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 73, :column 7, :end-line 73, :end-column 21, :arglists (quote ([p n]))}, :name binaural-beats.utils/with-precision, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 21, :method-params ([p n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p n]))}, rem-idx {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 59, :column 7, :end-line 59, :end-column 14, :arglists (quote ([v idx]))}, :name binaural-beats.utils/rem-idx, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 14, :method-params ([v idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v idx]))}, merge-in {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 66, :column 9, :end-line 66, :end-column 17, :arglists (quote ([& args])), :doc "Merge multiple nested maps.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name binaural-beats.utils/merge-in, :variadic true, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Merge multiple nested maps."}, now {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 11, :column 7, :end-line 11, :end-column 10, :arglists (quote ([]))}, :name binaural-beats.utils/now, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bounder {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 76, :column 7, :end-line 76, :end-column 14, :arglists (quote ([min max]))}, :name binaural-beats.utils/bounder, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 14, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max]))}, js> {:name binaural-beats.utils/js>, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 33, :column 1, :end-line 33, :end-column 9, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 33, :column 6, :end-line 33, :end-column 9}}, a&s {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([x s]))}, :name binaural-beats.utils/a&s, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 10, :method-params ([x s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x s]))}, scale-range {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 84, :column 7, :end-line 84, :end-column 18, :arglists (quote ([x in-min in-max out-min out-max])), :doc "Scales a given input value within the specified input range to a\n  corresponding value in the specified output range using the formula:\n\n           (out-max - out-min) (x - in-min)\n   f (x) = --------------------------------  + out-min\n                    in-max - in-min\n  "}, :name binaural-beats.utils/scale-range, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 18, :method-params ([x in-min in-max out-min out-max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x in-min in-max out-min out-max])), :doc "Scales a given input value within the specified input range to a\n  corresponding value in the specified output range using the formula:\n\n           (out-max - out-min) (x - in-min)\n   f (x) = --------------------------------  + out-min\n                    in-max - in-min\n  "}, interpolator {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([pts]))}, :name binaural-beats.utils/interpolator, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 19, :method-params ([pts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pts]))}, line {:name binaural-beats.utils/line, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 35, :column 1, :end-line 35, :end-column 10, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 35, :column 6, :end-line 35, :end-column 10}}, rwrap {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 114, :column 7, :end-line 114, :end-column 12, :arglists (quote ([build reaction-map & [debug]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(build reaction-map [debug])], :arglists ([build reaction-map & [debug]]), :arglists-meta (nil)}}, :name binaural-beats.utils/rwrap, :variadic true, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(build reaction-map [debug])], :arglists ([build reaction-map & [debug]]), :arglists-meta (nil)}, :method-params [(build reaction-map [debug])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists ([build reaction-map & [debug]])}, tval {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([x]))}, :name binaural-beats.utils/tval, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, index-of {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([coll value]))}, :name binaural-beats.utils/index-of, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 15, :method-params ([coll value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll value]))}, styles {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 42, :column 7, :end-line 42, :end-column 13, :arglists (quote ([x s]))}, :name binaural-beats.utils/styles, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 13, :method-params ([x s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x s]))}, attrs {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :line 37, :column 7, :end-line 37, :end-column 12, :arglists (quote ([x s]))}, :name binaural-beats.utils/attrs, :variadic false, :file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/utils.cljs", :end-column 12, :method-params ([x s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x s]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :else :build :styles :attrs :x}, :order [:x :y :attrs :styles :else :build]}, :doc nil}