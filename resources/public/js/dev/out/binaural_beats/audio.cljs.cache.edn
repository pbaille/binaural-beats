{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name binaural-beats.audio, :imports nil, :requires {s cljs-bach.synthesis, cljs-bach.synthesis cljs-bach.synthesis, u binaural-beats.utils, binaural-beats.utils binaural-beats.utils}, :uses nil, :defs {close-ctx {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 179, :column 7, :end-line 179, :end-column 16, :arglists (quote ([ctx]))}, :name binaural-beats.audio/close-ctx, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 16, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, envelop {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 83, :column 7, :end-line 83, :end-column 14, :arglists (quote ([corners])), :doc "Build an envelope out of [segment-duration final-level] coordinates."}, :name binaural-beats.audio/envelop, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 14, :method-params ([corners]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([corners])), :doc "Build an envelope out of [segment-duration final-level] coordinates."}, play {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 182, :column 7, :end-line 182, :end-column 11, :arglists (quote ([{:keys [ctx deltas fqs duration envelope]}]))}, :name binaural-beats.audio/play, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 11, :method-params ([p__28998]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ctx deltas fqs duration envelope]}]))}, set-val-at {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([x v at]))}, :name binaural-beats.audio/set-val-at, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 17, :method-params ([x v at]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x v at]))}, play-binaural {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 155, :column 7, :end-line 155, :end-column 20, :arglists (quote ([{:keys [ctx fqs deltas envelope duration]}]))}, :name binaural-beats.audio/play-binaural, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 20, :method-params ([p__28989]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ctx fqs deltas envelope duration]}]))}, exp-to {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([x v at]))}, :name binaural-beats.audio/exp-to, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 13, :method-params ([x v at]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x v at]))}, run-all-with {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 128, :column 7, :end-line 128, :end-column 19, :arglists (quote ([xs ctx ct duration]))}, :name binaural-beats.audio/run-all-with, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 19, :method-params ([xs ctx ct duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xs ctx ct duration]))}, custom-osc {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([{:keys [wavetable fqs interp-type]}]))}, :name binaural-beats.audio/custom-osc, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 17, :method-params ([p__28880]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [wavetable fqs interp-type]}]))}, tlmod {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 21, :column 7, :end-line 21, :end-column 12, :arglists (quote ([{:keys [interp-type tl path]}]))}, :name binaural-beats.audio/tlmod, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 12, :method-params ([p__28861]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [interp-type tl path]}]))}, pink-noise {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 92, :column 7, :end-line 92, :end-column 17, :arglists (quote ([]))}, :name binaural-beats.audio/pink-noise, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, tl {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 5, :column 7, :end-line 5, :end-column 9, :arglists (quote ([s])), :doc "timeline"}, :name binaural-beats.audio/tl, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 9, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "timeline"}, binaural-fq-seqs {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 131, :column 7, :end-line 131, :end-column 23, :arglists (quote ([fqs deltas duration]))}, :name binaural-beats.audio/binaural-fq-seqs, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 23, :method-params ([fqs deltas duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fqs deltas duration]))}, play-pink {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 99, :column 7, :end-line 99, :end-column 16, :arglists (quote ([{:keys [ctx gain duration]}]))}, :name binaural-beats.audio/play-pink, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 16, :method-params ([p__28919]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ctx gain duration]}]))}, play-binaural* {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 137, :column 7, :end-line 137, :end-column 21, :arglists (quote ([{:keys [ctx fqs deltas envelope duration]}]))}, :name binaural-beats.audio/play-binaural*, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 21, :method-params ([p__28979]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ctx fqs deltas envelope duration]}]))}, synth {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 106, :column 7, :end-line 106, :end-column 12, :arglists (quote ([{:keys [init fqs harmonics pan envelope osc-types]}])), :doc "return a seq of source nodes"}, :name binaural-beats.audio/synth, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 12, :method-params ([p__28925]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [init fqs harmonics pan envelope osc-types]}])), :doc "return a seq of source nodes"}, osc-line {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([{:keys [init points type]}]))}, :name binaural-beats.audio/osc-line, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 15, :method-params ([p__28898]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [init points type]}]))}, export-buffer {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 195, :column 7, :end-line 195, :end-column 20, :arglists (quote ([{:keys [duration], :as opts}]))}, :name binaural-beats.audio/export-buffer, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 20, :method-params ([p__29003]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [duration], :as opts}]))}, linear-to {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([x v at]))}, :name binaural-beats.audio/linear-to, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 16, :method-params ([x v at]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x v at]))}, trem {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/src/binaural_beats/audio.cljs", :line 53, :column 7, :end-line 53, :end-column 11, :arglists (quote ([{:keys [min max f]}]))}, :name binaural-beats.audio/trem, :variadic false, :file "src/binaural_beats/audio.cljs", :end-column 11, :method-params ([p__28891]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [min max f]}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :harmonics :path :min :envelope :wavetable :interp-type :init :tl :config :pan :sampleRate :exp :command :type :duration :points :max :gain :right :fqs :f :x :linear :ctx :none :buffer :deltas :osc-types :left}, :order [:interp-type :tl :path :exp :linear :none :wavetable :fqs :min :max :f :init :points :type :ctx :gain :duration :harmonics :pan :envelope :osc-types :left :right :deltas :x :y :command :config :sampleRate :buffer]}, :doc nil}