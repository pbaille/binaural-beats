{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljs-bach.synthesis, :imports nil, :requires nil, :uses nil, :defs {white-noise {:name cljs-bach.synthesis/white-noise, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 159, :column 1, :end-line 159, :end-column 17, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 159, :column 6, :end-line 159, :end-column 17}, :doc "Random noise."}, audio-context {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 3, :column 7, :end-line 3, :end-column 20, :arglists (quote ([])), :doc "Construct an audio context in a way that works even if it's prefixed."}, :name cljs-bach.synthesis/audio-context, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Construct an audio context in a way that works even if it's prefixed."}, add {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 130, :column 7, :end-line 130, :end-column 10, :arglists (quote ([& synths])), :doc "Add together synths by connecting them all to the same upstream and downstream gains.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(synths)], :arglists ([& synths]), :arglists-meta (nil)}}, :name cljs-bach.synthesis/add, :variadic true, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(synths)], :arglists ([& synths]), :arglists-meta (nil)}, :method-params [(synths)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 0, :fn-var true, :arglists ([& synths]), :doc "Add together synths by connecting them all to the same upstream and downstream gains."}, run-with {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([synth context at duration])), :doc "Convert a synth (actually a reader fn) into a concrete subgraph by supplying context and timing."}, :name cljs-bach.synthesis/run-with, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 15, :method-params ([synth context at duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 4, :fn-var true, :arglists (quote ([synth context at duration])), :doc "Convert a synth (actually a reader fn) into a concrete subgraph by supplying context and timing."}, destination {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 38, :column 7, :end-line 38, :end-column 18, :arglists (quote ([context at duration])), :doc "The destination of the audio context i.e. the speakers."}, :name cljs-bach.synthesis/destination, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 18, :method-params ([context at duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context at duration])), :doc "The destination of the audio context i.e. the speakers."}, sink {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([node])), :doc "A graph of synthesis nodes without an output, so it can't connect to another graph."}, :name cljs-bach.synthesis/sink, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 11, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "A graph of synthesis nodes without an output, so it can't connect to another graph."}, join {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 121, :column 7, :end-line 121, :end-column 11, :arglists (quote ([upstream downstream & graphs])), :doc "Join the graphs in parallel, with upstream and downstream as the source and sink.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(upstream downstream graphs)], :arglists ([upstream downstream & graphs]), :arglists-meta (nil)}}, :name cljs-bach.synthesis/join, :variadic true, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(upstream downstream graphs)], :arglists ([upstream downstream & graphs]), :arglists-meta (nil)}, :method-params [(upstream downstream graphs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists ([upstream downstream & graphs]), :doc "Join the graphs in parallel, with upstream and downstream as the source and sink."}, buffer {:name cljs-bach.synthesis/buffer, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 148, :column 1, :end-line 148, :end-column 12, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 148, :column 6, :end-line 148, :end-column 12}}, adsr {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 81, :column 7, :end-line 81, :end-column 11, :arglists (quote ([attack decay sustain release])), :doc "A four-stage envelope."}, :name cljs-bach.synthesis/adsr, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 11, :method-params ([attack decay sustain release]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 4, :fn-var true, :arglists (quote ([attack decay sustain release])), :doc "A four-stage envelope."}, stereo-panner {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 210, :column 7, :end-line 210, :end-column 20, :arglists (quote ([pan])), :doc "Pan the signal left (-1) or right (1)."}, :name cljs-bach.synthesis/stereo-panner, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 20, :method-params ([pan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pan])), :doc "Pan the signal left (-1) or right (1)."}, enhance {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 246, :column 7, :end-line 246, :end-column 14, :arglists (quote ([effect level])), :doc "Mix the original signal with one with the effect applied."}, :name cljs-bach.synthesis/enhance, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 14, :method-params ([effect level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([effect level])), :doc "Mix the original signal with one with the effect applied."}, adshr {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 76, :column 7, :end-line 76, :end-column 12, :arglists (quote ([attack decay sustain hold release])), :doc "An ADSR envelope that also lets you specify the hold duration."}, :name cljs-bach.synthesis/adshr, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 12, :method-params ([attack decay sustain hold release]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 5, :fn-var true, :arglists (quote ([attack decay sustain hold release])), :doc "An ADSR envelope that also lets you specify the hold duration."}, envelope {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([& corners])), :doc "Build an envelope out of [segment-duration final-level] coordinates.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(corners)], :arglists ([& corners]), :arglists-meta (nil)}}, :name cljs-bach.synthesis/envelope, :variadic true, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(corners)], :arglists ([& corners]), :arglists-meta (nil)}, :method-params [(corners)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists ([& corners]), :doc "Build an envelope out of [segment-duration final-level] coordinates."}, connect-> {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 116, :column 7, :end-line 116, :end-column 16, :arglists (quote ([& nodes])), :doc "Connect synths in series.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}}, :name cljs-bach.synthesis/connect->, :variadic true, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}, :method-params [(nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists ([& nodes]), :doc "Connect synths in series."}, current-time {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 10, :column 7, :end-line 10, :end-column 19, :arglists (quote ([context])), :doc "Return the current time as recorded by the audio context."}, :name cljs-bach.synthesis/current-time, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 19, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :doc "Return the current time as recorded by the audio context."}, convolver {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 227, :column 7, :end-line 227, :end-column 16, :arglists (quote ([generate-bit!])), :doc "Linear convolution."}, :name cljs-bach.synthesis/convolver, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 16, :method-params ([generate-bit!]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generate-bit!])), :doc "Linear convolution."}, oscillator {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 171, :column 7, :end-line 171, :end-column 17, :arglists (quote ([type freq])), :doc "A periodic wave."}, :name cljs-bach.synthesis/oscillator, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 17, :method-params ([type freq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type freq])), :doc "A periodic wave."}, update-graph {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 98, :column 7, :end-line 98, :end-column 19, :arglists (quote ([f & synths])), :doc "Like update-in, but for the node graph a synth will return (and variadic).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f synths)], :arglists ([f & synths]), :arglists-meta (nil)}}, :name cljs-bach.synthesis/update-graph, :variadic true, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f synths)], :arglists ([f & synths]), :arglists-meta (nil)}, :method-params [(f synths)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists ([f & synths]), :doc "Like update-in, but for the node graph a synth will return (and variadic)."}, sawtooth {:name cljs-bach.synthesis/sawtooth, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 184, :column 1, :end-line 184, :end-column 14, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 184, :column 6, :end-line 184, :end-column 14}}, triangle {:name cljs-bach.synthesis/triangle, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 186, :column 1, :end-line 186, :end-column 14, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 186, :column 6, :end-line 186, :end-column 14}}, plug {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 43, :column 7, :end-line 43, :end-column 11, :arglists (quote ([param input context at duration]))}, :name cljs-bach.synthesis/plug, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 11, :method-params ([param input context at duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 5, :fn-var true, :arglists (quote ([param input context at duration]))}, pass-through {:name cljs-bach.synthesis/pass-through, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 57, :column 1, :end-line 57, :end-column 18, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 57, :column 6, :end-line 57, :end-column 18}, :doc "Pass the signal through unaltered."}, constant {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 164, :column 7, :end-line 164, :end-column 15, :arglists (quote ([x])), :doc "Make a constant value by creating noise with a fixed value."}, :name cljs-bach.synthesis/constant, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Make a constant value by creating noise with a fixed value."}, connect {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 106, :column 7, :end-line 106, :end-column 14, :arglists (quote ([upstream-synth downstream-synth])), :doc "Use the output of one synth as the input to another."}, :name cljs-bach.synthesis/connect, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 14, :method-params ([upstream-synth downstream-synth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([upstream-synth downstream-synth])), :doc "Use the output of one synth as the input to another."}, reverb {:name cljs-bach.synthesis/reverb, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 235, :column 1, :end-line 235, :end-column 12, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 235, :column 6, :end-line 235, :end-column 12}, :doc "Crude reverb."}, raw-buffer {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 138, :column 7, :end-line 138, :end-column 17, :arglists (quote ([generate-bit! context duration]))}, :name cljs-bach.synthesis/raw-buffer, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 17, :method-params ([generate-bit! context duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 3, :fn-var true, :arglists (quote ([generate-bit! context duration]))}, low-pass {:name cljs-bach.synthesis/low-pass, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 204, :column 1, :end-line 204, :end-column 14, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 204, :column 6, :end-line 204, :end-column 14}}, noise {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 150, :column 7, :end-line 150, :end-column 12, :arglists (quote ([generate-bit!])), :doc "Make noise according to the supplied strategy for creating bits."}, :name cljs-bach.synthesis/noise, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 12, :method-params ([generate-bit!]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generate-bit!])), :doc "Make noise according to the supplied strategy for creating bits."}, delay-line {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 218, :column 7, :end-line 218, :end-column 17, :arglists (quote ([seconds])), :doc "Delay the signal."}, :name cljs-bach.synthesis/delay-line, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 17, :method-params ([seconds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seconds])), :doc "Delay the signal."}, source {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([node])), :doc "A graph of synthesis nodes without an input, so another graph can't connect to it."}, :name cljs-bach.synthesis/source, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 13, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "A graph of synthesis nodes without an input, so another graph can't connect to it."}, high-pass {:name cljs-bach.synthesis/high-pass, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 205, :column 1, :end-line 205, :end-column 15, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 205, :column 6, :end-line 205, :end-column 15}}, biquad-filter {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 191, :column 7, :end-line 191, :end-column 20, :arglists (quote ([type freq] [type freq q])), :doc "Attenuate frequencies beyond the cutoff, and intensify the cutoff frequency based on the value of q.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type freq] [type freq q]), :arglists ([type freq] [type freq q]), :arglists-meta (nil nil)}}, :name cljs-bach.synthesis/biquad-filter, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([type freq] [type freq q]), :arglists ([type freq] [type freq q]), :arglists-meta (nil nil)}, :method-params ([type freq] [type freq q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists ([type freq] [type freq q]), :doc "Attenuate frequencies beyond the cutoff, and intensify the cutoff frequency based on the value of q."}, gain {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 49, :column 7, :end-line 49, :end-column 11, :arglists (quote ([level])), :doc "Multiply the signal by level."}, :name cljs-bach.synthesis/gain, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 11, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :doc "Multiply the signal by level."}, square {:name cljs-bach.synthesis/square, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 185, :column 1, :end-line 185, :end-column 12, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 185, :column 6, :end-line 185, :end-column 12}}, subgraph {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 17, :column 7, :end-line 17, :end-column 15, :arglists (quote ([input output] [singleton])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([input output] [singleton]), :arglists ([input output] [singleton]), :arglists-meta (nil nil)}}, :name cljs-bach.synthesis/subgraph, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([input output] [singleton]), :arglists ([input output] [singleton]), :arglists-meta (nil nil)}, :method-params ([input output] [singleton]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists ([input output] [singleton])}, sine {:name cljs-bach.synthesis/sine, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 183, :column 1, :end-line 183, :end-column 10, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 183, :column 6, :end-line 183, :end-column 10}}, percussive {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/Projects/binaural-beats/resources/public/js/dev/out/cljs_bach/synthesis.cljs", :line 90, :column 7, :end-line 90, :end-column 17, :arglists (quote ([attack decay])), :doc "A simple envelope."}, :name cljs-bach.synthesis/percussive, :variadic false, :file "resources/public/js/dev/out/cljs_bach/synthesis.cljs", :end-column 17, :method-params ([attack decay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attack decay])), :doc "A simple envelope."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:output :input}, :order [:input :output]}, :doc nil}